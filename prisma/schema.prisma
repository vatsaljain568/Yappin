// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String   @id  @default(cuid()) // here id means it will be automatically generated by prisma
  username  String   @unique
  email     String   @unique
  clerkId   String   @unique
  
  name      String?
  bio       String?
  image    String?
  location  String?
  website  String?
  createdAt DateTime @default(now()) //member since
  updatedAt DateTime @updatedAt

  // Relations
  posts     post[] // one-to-many 
  comments  comments[] // one-to-many
  likes     likes[] // one-to-many

  followers Follows[] @relation("following") // followers
  following Follows[] @relation("follower") // following

  notifications Notification[] @relation("UserNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
}

model post{
  id        String   @id  @default(cuid())
  authorId  String
  content   String?
  image     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    users @relation(fields: [authorId], references: [id], onDelete: Cascade) // cascade delete means if user is deleted then all the posts related to that user will also be deleted
  comments  comments[]
  likes     likes[]
  notifications Notification[]
}

model comments{
  id        String   @id  @default(cuid())
  postId    String
  authorId  String
  content   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post   post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author users @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId , postId]) // composite index for faster query
}

model likes{
  id        String   @id  @default(cuid())
  postId    String
  userId  String

  createdAt DateTime @default(now())

  // Relations
  post   post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId , postId])
  @@unique([userId , postId]) // unique index to avoid duplicate entries
}

model Follows{
  followerId String
  followingId String

  createdAt DateTime @default(now())

  // Relations
  follower users @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following users @relation("follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId , followingId])
  @@id([followerId , followingId]) // composite primary key to avoid duplicate entries
}

model Notification{
  id        String   @id  @default(cuid())
  userId    String
  creatorId String
  postId    String?
  commentId String?
  type      NotificationType
  read      Boolean @default(false)
  createdAt DateTime @default(now())

  // Relations
  post    post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    users @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator users @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  comment comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@index([userId , creatorId])
}

enum NotificationType{
  LIKE
  COMMENT
  FOLLOW
}